[{"path":"https://torfason.github.io/gitpins/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Magnus Thor Torfason Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyrght notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://torfason.github.io/gitpins/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Magnus Thor Torfason. Maintainer.","code":""},{"path":"https://torfason.github.io/gitpins/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Torfason MT (2025). gitpins: Pin urls local file version git. R package version 0.1.3.9003, https://torfason.github.io/gitpins/, https://github.com/torfason/gitpins.","code":"@Manual{,   title = {gitpins: Pin urls to local file and version with git},   author = {Magnus Thor Torfason},   year = {2025},   note = {R package version 0.1.3.9003, https://torfason.github.io/gitpins/},   url = {https://github.com/torfason/gitpins}, }"},{"path":"https://torfason.github.io/gitpins/index.html","id":"gitpins","dir":"","previous_headings":"","what":"Pin urls to local file and version with git","title":"Pin urls to local file and version with git","text":"Pin URLs local file version pins git. Repeated downloads versioned using local git repository, getting document web successful, previous local download made available.","code":""},{"path":"https://torfason.github.io/gitpins/index.html","id":"the-problem","dir":"","previous_headings":"","what":"The Problem","title":"Pin urls to local file and version with git","text":"want quickly easily process online resource using R functions, accept local files. Thus like following properties workflow: Download local file avoid downloading every single run Refresh data regularly online source Use local copy online resource accessible local copy easily accessible predictable location ruin local copy online version change “bad” way","code":""},{"path":"https://torfason.github.io/gitpins/index.html","id":"the-solution","dir":"","previous_headings":"","what":"The Solution","title":"Pin urls to local file and version with git","text":"gitpins package downloads URL local file gitpins folder (defaults ::(\"gitpins\"), can configured using gp_options()), returns full file name name local file, can passed argument function expects read file.","code":""},{"path":"https://torfason.github.io/gitpins/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pin urls to local file and version with git","text":"Install gitpins using pak:","code":"pak::pak(\"torfason/gitpins\")"},{"path":"https://torfason.github.io/gitpins/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Pin urls to local file and version with git","text":"can maintain many resources need: file downloaded first time run pin() given URL (actual download done curl::curl_download()). , checks see age local file re-downloads old. default refresh interval 12 hours, configurable parameter. Note return value pin() function simply full path local copy file. can therefore use pin() original URL wherever used local path resource. exact name file constructed deterministic way based URL (specifically, base name digest() URL). refresh interval configured refresh_hours parameter. Use refresh_hours=0 force download every call, refresh_hours=Inf always use local copy (first download). helper function, gp_dropper() provided case new version resource “drops” time every day. function allows set lower interval given time window expected drop time, maximize probability updated version gets downloaded quickly. gitpins directory actually local git repository, new version committed repository. way, complete history downloads kept, resource changing lot, history take inordinate amount space (deduplication properties git). resource gets borked, can retrieve older versions using git. function provided list available pins (without history), beyond , user expected use git directly complex retrieval operations.","code":"# Downloads on first try pin(\"https://vincentarelbundock.github.io/Rdatasets/csv/openintro/country_iso.csv\") |>    read.csv() |> head() #> pin() downloaded fresh version ... #>   rownames country_code         country_name year top_level_domain #> 1        1           AD              Andorra 1974              .ad #> 2        2           AE United Arab Emirates 1974              .ae #> 3        3           AF          Afghanistan 1974              .af #> 4        4           AG  Antigua and Barbuda 1974              .ag #> 5        5           AI             Anguilla 1985              .ai #> 6        6           AL              Albania 1974              .al # Another resource pin(\"https://vincentarelbundock.github.io/Rdatasets/csv/datasets/sunspot.month.csv\") |>    read.csv() |> head() #> pin() downloaded fresh version ... #>   rownames     time value #> 1        1 1749.000  58.0 #> 2        2 1749.083  62.6 #> 3        3 1749.167  70.0 #> 4        4 1749.250  55.7 #> 5        5 1749.333  85.0 #> 6        6 1749.417  83.5 # Uses a cached copy if a recent one is available (start of the url changed for privacy) pin(\"https://vincentarelbundock.github.io/Rdatasets/csv/openintro/country_iso.csv\") |>   gsub(pattern=\".*/(gitpins/.*)\", replacement=\"/home/user/project/\\\\1\") #> pin() found recent version, using it ... #> [1] \"/home/user/project/gitpins/5ad1e570044be11330713642c682b9db.data\" # Force a reload by specifying zero refresh time pin(\"https://vincentarelbundock.github.io/Rdatasets/csv/openintro/country_iso.csv\",        refresh_hours = 0) |>   gsub(pattern=\".*/(gitpins/.*)\", replacement=\"/home/user/project/\\\\1\") #> pin() downloaded fresh version ... #> [1] \"/home/user/project/gitpins/5ad1e570044be11330713642c682b9db.data\"  # Always use local copy by specifying Inf refresh time pin(\"https://vincentarelbundock.github.io/Rdatasets/csv/openintro/country_iso.csv\",        refresh_hours = Inf) |>   gsub(pattern=\".*/(gitpins/.*)\", replacement=\"/home/user/project/\\\\1\") #> pin() found recent version, using it ... #> [1] \"/home/user/project/gitpins/5ad1e570044be11330713642c682b9db.data\"  # Set a lower interval for a given time window after a resource update \"drops\" pin(\"https://vincentarelbundock.github.io/Rdatasets/csv/openintro/country_iso.csv\",        refresh_hours = gp_dropper(drop_hour = 12, drop_tz = \"US/Eastern\")) |>   gsub(pattern=\".*/(gitpins/.*)\", replacement=\"/home/user/project/\\\\1\") #> pin() found recent version, using it ... #> [1] \"/home/user/project/gitpins/5ad1e570044be11330713642c682b9db.data\" withr::with_options(list(width = 130), {   gp_list()   gp_list(history = TRUE) }) #> Loading required namespace: tibble #> # A tibble: 3 × 2 #>   timestamp                 url                                                  #>   <chr>                     <chr>                                                #> 1 2025-03-21 18:37:54.01494 https://vincentarelbundock.github.io/Rdatasets/csv/… #> 2 2025-03-21 18:37:53.92917 https://vincentarelbundock.github.io/Rdatasets/csv/… #> 3 2025-03-21 18:37:53.69935 https://vincentarelbundock.github.io/Rdatasets/csv/…"},{"path":"https://torfason.github.io/gitpins/index.html","id":"function-name-conflicts","dir":"","previous_headings":"","what":"Function Name Conflicts","title":"Pin urls to local file and version with git","text":"use another package also defines pin() function (pins package), conflicted package comes highly recommended, exclude option library() function also valid approach. either case, gp_pin() function provided alias pin() don’t need specify full package name call:","code":""},{"path":"https://torfason.github.io/gitpins/index.html","id":"using-conflicted","dir":"","previous_headings":"Function Name Conflicts","what":"Using conflicted","title":"Pin urls to local file and version with git","text":"","code":"library(conflicted) conflicts_prefer(pins::pin()) library(pins) library(gitpins) gp_pin(URL)"},{"path":"https://torfason.github.io/gitpins/index.html","id":"using-exclude","dir":"","previous_headings":"Function Name Conflicts","what":"Using exclude","title":"Pin urls to local file and version with git","text":"","code":"library(pins) library(gitpins, exclude=\"pin\") gp_pin(URL)"},{"path":"https://torfason.github.io/gitpins/index.html","id":"related-packages-system-requirements-and-feedback","dir":"","previous_headings":"","what":"Related Packages, System Requirements, and Feedback","title":"Pin urls to local file and version with git","text":"package inspired pins package, particular pins::pin() function. However, function stores actual local file system location rather inside project, using prove reliable. Furthermore, desired versioning properties, finally, now defined legacy function part new api package. result, gitpins born. Note gitpins uses native pipe operator (|>) depends R (>= 4.1.0). feature requests, bugs, feedback, feel free file issue.","code":""},{"path":"https://torfason.github.io/gitpins/reference/assert_dots_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that no dots arguments are passed — assert_dots_empty","title":"Assert that no dots arguments are passed — assert_dots_empty","text":"alias rlang::check_dots_empty(), consistency arguments. function throws error unnamed parameters passed function called.","code":""},{"path":"https://torfason.github.io/gitpins/reference/assert_dots_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that no dots arguments are passed — assert_dots_empty","text":"","code":"assert_dots_empty(   env = caller_env(),   error = NULL,   call = caller_env(),   action = abort )"},{"path":"https://torfason.github.io/gitpins/reference/assert_gp_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that x is a valid gp_options object — assert_gp_options","title":"Verify that x is a valid gp_options object — assert_gp_options","text":"Verifies x gp_options object (class gitpins_gp_options) elements object valid object. Use gp_options() create gp_options objects.","code":""},{"path":"https://torfason.github.io/gitpins/reference/assert_gp_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that x is a valid gp_options object — assert_gp_options","text":"","code":"assert_gp_options(x)"},{"path":"https://torfason.github.io/gitpins/reference/assert_gp_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that x is a valid gp_options object — assert_gp_options","text":"x object verify.","code":""},{"path":"https://torfason.github.io/gitpins/reference/assert_gp_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that x is a valid gp_options object — assert_gp_options","text":"Unchanged input valid, otherwise error thrown.","code":""},{"path":"https://torfason.github.io/gitpins/reference/fstamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert date-time variable to file-compatible timestamp — fstamp","title":"Convert date-time variable to file-compatible timestamp — fstamp","text":"Convert date-time variable file-compatible timestamp","code":""},{"path":"https://torfason.github.io/gitpins/reference/fstamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert date-time variable to file-compatible timestamp — fstamp","text":"","code":"fstamp(the_datetime)"},{"path":"https://torfason.github.io/gitpins/reference/fstamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert date-time variable to file-compatible timestamp — fstamp","text":"the_datetime date variable","code":""},{"path":"https://torfason.github.io/gitpins/reference/fstamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert date-time variable to file-compatible timestamp — fstamp","text":"character representation the_datetime timestamp file-compatible characters","code":""},{"path":"https://torfason.github.io/gitpins/reference/gitpins.html","id":null,"dir":"Reference","previous_headings":"","what":"gitpins: Pin urls to local file and version with git — gitpins","title":"gitpins: Pin urls to local file and version with git — gitpins","text":"Pin URLs local file version pins git. Repeated downloads versioned using local git repository, getting document web successful, previous local download made available. get started, check help pin() function, take look info GitHub (see links ).","code":""},{"path":[]},{"path":"https://torfason.github.io/gitpins/reference/gp_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Clearing old pins is not currently implemented — gp_clear","title":"Clearing old pins is not currently implemented — gp_clear","text":"Clearing old pins currently implemented","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clearing old pins is not currently implemented — gp_clear","text":"","code":"gp_clear()"},{"path":"https://torfason.github.io/gitpins/reference/gp_dropper.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate refresh interval to target specific daily drop time — gp_dropper","title":"Calculate refresh interval to target specific daily drop time — gp_dropper","text":"Assuming one looking pin online resource typically updated time day, function calculates refresh interval maximizes likelihood pin refreshed close time new version \"drops\" (drop_hour). assumption resource drops sometime drop_hour drop_hour + drop_window. time, refresh interval lowered refresh_floor. drop window closes, interval slowly rises refresh_ceiling, way ensures refresh always triggered resource refreshed last drop window closed.","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_dropper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate refresh interval to target specific daily drop time — gp_dropper","text":"","code":"gp_dropper(   drop_hour,   drop_window = 1,   drop_tz = Sys.timezone(),   refresh_floor = 0.1,   refresh_ceiling = 12,   now_hour = Sys.time() )"},{"path":"https://torfason.github.io/gitpins/reference/gp_dropper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate refresh interval to target specific daily drop time — gp_dropper","text":"drop_hour hour resource typically drops. Either specified numeric 24h time, POSIX time object. drop_window window, hours, time expect drop happen. drop_tz time zone resource. particular, relevant drop_hour specified number, now_hour specified POSIX time object. refresh_floor lowest allowed refresh interval. refresh_ceiling highest allowed refresh interval. now_hour hour pin taking place. Can passed numeric 24h time, POSIX time. Defaults current time, often appropriate.","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_dropper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate refresh interval to target specific daily drop time — gp_dropper","text":"","code":"# Assuming that the resource is updated at noon, US/Eastern time zone url <- \"https://vincentarelbundock.github.io/Rdatasets/csv/openintro/country_iso.csv\" pin(url, refresh_hours = gp_dropper(drop_hour = 12, drop_tz = \"US/Eastern\")) #> pin() downloaded fresh version ... #> [1] \"/home/runner/work/gitpins/gitpins/gitpins/5ad1e570044be11330713642c682b9db.data\"  # Demonstration of the actual refresh interval returned by gp_dropper() gp_dropper(drop_hour = 12, drop_tz = \"US/Eastern\") #> [1] 1.711927"},{"path":"https://torfason.github.io/gitpins/reference/gp_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize gitpins repository — gp_init","title":"Initialize gitpins repository — gp_init","text":"function generally called automatically needed. Note, however, set non-standard directory pinned files, function must called functions.","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize gitpins repository — gp_init","text":"","code":"gp_init(..., options = gp_options())"},{"path":"https://torfason.github.io/gitpins/reference/gp_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize gitpins repository — gp_init","text":"... Reserved. arguments must named. options gp_options() object, used particular select directory storing pins (defaults ::(\"gitpins\")).","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize gitpins repository — gp_init","text":"path repository","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List available pins — gp_list","title":"List available pins — gp_list","text":"List available pins","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available pins — gp_list","text":"","code":"gp_list(history = FALSE)"},{"path":"https://torfason.github.io/gitpins/reference/gp_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available pins — gp_list","text":"history full (git) history returned?","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available pins — gp_list","text":"data.frame timestamps urls available pins.","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gp_options Object — gp_options","title":"Create a gp_options Object — gp_options","text":"Constructs gp_options object configurable parameters. parameters can set defaults, R options, directly options object created.","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gp_options Object — gp_options","text":"","code":"gp_options(   ...,   pin_directory = getOption(\"gitpins.pin_directory\", here::here(\"gitpins\")) )"},{"path":"https://torfason.github.io/gitpins/reference/gp_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gp_options Object — gp_options","text":"... Reserved. arguments must named. pin_directory character string specifying directory use pin directory (local git repository downloaded resources stored versioned).","code":""},{"path":"https://torfason.github.io/gitpins/reference/gp_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gp_options Object — gp_options","text":"list representing gp_options object.","code":""},{"path":"https://torfason.github.io/gitpins/reference/pin.html","id":null,"dir":"Reference","previous_headings":"","what":"Download URL, add to gitpins repository, and return filename — pin","title":"Download URL, add to gitpins repository, and return filename — pin","text":"pin() function downloads URL local file gitpins folder inside project (currently fixed path determined (\"gitpins\")), returns full file name name local file, can passed argument function expects read file.","code":""},{"path":"https://torfason.github.io/gitpins/reference/pin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download URL, add to gitpins repository, and return filename — pin","text":"","code":"pin(url, refresh_hours = 12)  gp_pin(url, refresh_hours = 12)"},{"path":"https://torfason.github.io/gitpins/reference/pin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download URL, add to gitpins repository, and return filename — pin","text":"url URL download (get cached copy ) refresh_hours old, hours, can locally cached copy downloading new version.","code":""},{"path":"https://torfason.github.io/gitpins/reference/pin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download URL, add to gitpins repository, and return filename — pin","text":"path locally downloaded file","code":""},{"path":"https://torfason.github.io/gitpins/reference/tstamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert date-time variable to sub-millisecond timestamp — tstamp","title":"Convert date-time variable to sub-millisecond timestamp — tstamp","text":"Convert date-time variable sub-millisecond timestamp","code":""},{"path":"https://torfason.github.io/gitpins/reference/tstamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert date-time variable to sub-millisecond timestamp — tstamp","text":"","code":"tstamp(the_datetime)"},{"path":"https://torfason.github.io/gitpins/reference/tstamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert date-time variable to sub-millisecond timestamp — tstamp","text":"the_datetime date variable","code":""},{"path":"https://torfason.github.io/gitpins/reference/tstamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert date-time variable to sub-millisecond timestamp — tstamp","text":"character representation the_datetime sub-millisecond timestamp","code":""},{"path":"https://torfason.github.io/gitpins/news/index.html","id":"version-039003","dir":"Changelog","previous_headings":"","what":"Version 0.3.9003","title":"Version 0.3.9003","text":"Custom location gitpin directory using gp_options() Target specific “drop” times online resources fetched, using gp_dropper() consistent function names, gp_pin(), gp_list(), gp_options(), gp_dropper()","code":""},{"path":"https://torfason.github.io/gitpins/news/index.html","id":"version-030","dir":"Changelog","previous_headings":"","what":"Version 0.3.0","title":"Version 0.3.0","text":"Initial release.","code":""}]
